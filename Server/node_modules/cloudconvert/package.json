{
  "_from": "cloudconvert",
  "_id": "cloudconvert@1.1.2",
  "_inBundle": false,
  "_integrity": "sha1-voWmWqxNLPXffjqbdhsJ123iXtQ=",
  "_location": "/cloudconvert",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "cloudconvert",
    "fetchSpec": "latest",
    "name": "cloudconvert",
    "raw": "cloudconvert",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/cloudconvert/-/cloudconvert-1.1.2.tgz",
  "_shasum": "be85a65aac4d2cf5df7e3a9b761b09d76de25ed4",
  "_spec": "cloudconvert",
  "_where": "C:\\xampp\\htdocs\\MyFile\\Server",
  "author": {
    "email": "josias@montag.info",
    "name": "Josias Montag"
  },
  "bugs": {
    "url": "https://github.com/cloudconvert/cloudconvert-node/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "async": "^2.1.5",
    "pause-stream": "0.0.11",
    "request": "^2.81.0"
  },
  "deprecated": false,
  "description": "Official Node.js wrapper for the CloudConvert API",
  "devDependencies": {
    "chai": "3.*",
    "chai-as-promised": "*",
    "jshint": "*",
    "mocha": "*",
    "nock": "*",
    "supertest": "*",
    "supertest-as-promised": "*"
  },
  "homepage": "https://github.com/cloudconvert/cloudconvert-node",
  "license": "MIT",
  "main": "./lib/api.js",
  "name": "cloudconvert",
  "optionalDependencies": {},
  "readme": "cloudconvert-node\n=======================\nThis is a lightweight wrapper for the [CloudConvert](https://cloudconvert.com) API.\n\nFeel free to use, improve or modify this wrapper! If you have questions contact us or open an issue on GitHub.\n\n\n[![Build Status](https://travis-ci.org/cloudconvert/cloudconvert-node.svg?branch=master)](https://travis-ci.org/cloudconvert/cloudconvert-node)\n[![npm](https://img.shields.io/npm/v/cloudconvert.svg)](https://www.npmjs.com/package/cloudconvert)\n[![npm](https://img.shields.io/npm/dt/cloudconvert.svg)](https://www.npmjs.com/package/cloudconvert)\n\nInstallation\n-------------------\nAs usual:\n\n    npm install --save cloudconvert\n    \n\nQuickstart\n-------------------\n```js\nvar fs = require('fs');\nvar cloudconvert = new (require('cloudconvert'))('your_api_key');\n\nfs.createReadStream('tests/input.png')\n.pipe(cloudconvert.convert({\n    inputformat: 'png',\n    outputformat: 'jpg',\n    converteroptions: {\n        quality : 75,\n    }\n }))\n.pipe(fs.createWriteStream('out.jpg'))\n.on('finish', function() {\n    console.log('Done!');\n});\n```\nYou can use the [CloudConvert API Console](https://cloudconvert.com/apiconsole) to generate ready-to-use JS code snippets using this wrapper.\n\n\n\nThe manual way\n-------------------\n``cloudconvert.convert()`` creates a Process, start it and waits until it completes. In some cases it might be necessary that you do this steps seperately, as the following example shows:\n\n```js\n\nvar fs = require('fs');\nvar cloudconvert = new (require('cloudconvert'))('your_api_key');\n\n// create the process. see https://cloudconvert.com/apidoc#create\ncloudconvert.createProcess({inputformat: 'png', outputformat: 'pdf'}, function(err, process) {\n\n    if(err) {\n        console.error('CloudConvert Process creation failed: ' + err);\n    } else {\n\n        // start the process. see https://cloudconvert.com/apidoc#create\n        process.start({\n            outputformat: 'jpg',\n            converteroptions: {\n                quality : 75,\n            },\n            input: 'upload'\n        }, function (err, process) {\n\n            if (err) {\n                console.error('CloudConvert Process start failed: ' + err);\n            } else {\n\n                // upload the input file. see https://cloudconvert.com/apidoc#upload\n                process.upload(fs.createReadStream('tests/input.png'), null, function (err, process) {\n\n                    if (err) {\n                        console.error('CloudConvert Process upload failed: ' + err);\n                    } else {\n                        // wait until the process is finished (or completed with an error)\n                        process.wait(function (err, process) {\n                            if (err) {\n                                console.error('CloudConvert Process failed: ' + err);\n                            } else {\n                                console.log('Done: ' + process.data.message);\n\n                                // download it\n                                process.download(fs.createWriteStream(\"out.jpg\"), null, function (err, process) {\n                                    if (err) {\n                                        console.error('CloudConvert Process download failed: ' + err);\n                                    } else {\n                                        console.log('Downloaded to out.jpg');\n                                    }\n                                });\n                            }\n\n                        });\n                    }\n                });\n\n\n            }\n        });\n    }\n\n});\n```\n\n\nDownload of multiple output files\n-------------------\n\nIn some cases it might be possible that there are multiple output files (e.g. converting a multi-page PDF to JPG). You can download them all to one directory using the ``downloadAll()`` method.\n\n```js\nvar fs = require('fs');\nvar cloudconvert = new (require('cloudconvert'))('your_api_key');\n\nfs.createReadStream('tests/input.pdf').pipe(cloudconvert.convert({\n    inputformat: 'pdf',\n    outputformat: 'jpg',\n    converteroptions: {\n        page_range : '1-3',\n    }\n}).on('error', function(err) {\n    console.error('Failed: ' + err);\n}).on('finished', function(data) {\n    console.log('Done: ' + data.message);\n    this.downloadAll('tests/');\n}).on('downloaded', function(destination) {\n    console.log('Downloaded to: ' + destination.path);\n}).on('downloadedAll', function(path) {\n    console.log('Downloaded all to: ' + path);\n}));\n\n```\n\n\nEvents\n-----------------\nThe ``Process``object emits the following Events:\n\nEvent|Description\n------|------------\n``error``| The conversion failed. You should always listen for this event: If there is no listener, the error will be thrown and might crash your application.\n``finished``| The conversion is finished (but **not** yet downloaded). This event will only be emitted, if you do ``wait()`` for the process. (``convert()`` does this automatically for you).\n``progress``|Emitted every second with the current progress of the conversion. This event will only be emitted, if you do ``wait()`` for the process. \n``uploadeded``|The input file was uploaded.\n``started``|The process was started.\n``downloaded``|The output file was downloaded.\n``downloadedAll``|Emitted after  completed ``downloadAll()``. Every single file will emit a seperate ``downloaded`` event.\n\n\nError handling\n-----------------\nThe following example shows how to catch the different error types which can occur at conversions:\n\n```js\nvar fs = require('fs');\nvar cloudconvert = new (require('cloudconvert'))('your_api_key');\n\nfs.createReadStream('tests/input.pdf').pipe(cloudconvert.convert({\n    inputformat: 'pdf',\n    outputformat: 'jpg',\n}).on('error', function(err) {\n    switch (err.code) {\n        case 400:\n            console.error('Something with your request is wrong: ' + err);\n            break;\n        case 422:\n            console.error('Conversion failed, maybe because of a broken input file: ' + err);\n            break;\n        case 503:\n            console.error('API temporary unavailable: ' + err);\n            console.error('We should retry the conversion in ' + err.retryAfter + ' seconds');\n            break;\n        default:\n            // network problems, etc..\n            console.error('Something else went wrong: ' + err);\n            break;\n    }\n}).on('finished', function(data) {\n    console.log('Done: ' + data.message);\n}));\n\n```\n\n\n\nHow to run tests?\n-----------------\n\nTests are based on mocha: \n\n    git https://github.com/cloudconvert/cloudconvert-node.git\n    cd cloudconvert-node\n    npm install -d\n    npm test\n\n\n\nHow to run integration tests?\n-----------------\n\nBy default, mocha does not run integration tests against the real CloudConvert API. To run integration tests, use the `API_KEY` enviroment variable and run the integration tests:\n\n    git https://github.com/cloudconvert/cloudconvert-node.git\n    cd cloudconvert-node\n    npm install -d\n    export API_KEY=\"your_api_key\"\n    npm run integration\n    \n\nResources\n---------\n\n* [API Documentation](https://cloudconvert.com/api)\n* [Conversion Types](https://cloudconvert.com/formats)\n* [CloudConvert Blog](https://cloudconvert.com/blog)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/cloudconvert/cloudconvert-node.git"
  },
  "scripts": {
    "integration": "jshint lib tests && node node_modules/.bin/mocha tests/integration",
    "test": "jshint lib tests && node node_modules/.bin/mocha tests/unit"
  },
  "version": "1.1.2"
}
